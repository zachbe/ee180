// ***************************************************************************
// ***************************************************************************
// Copyright 2011(c) Analog Devices, Inc.
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//     - Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     - Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in
//       the documentation and/or other materials provided with the
//       distribution.
//     - Neither the name of Analog Devices, Inc. nor the names of its
//       contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//     - The use of this software may or may not infringe the patent rights
//       of one or more patent holders.  This license does not release you
//       from the requirement that you obtain separate licenses from these
//       patent holders to use this software.
//     - Use of the software either in source or binary form, must be run
//       on or directly connected to an Analog Devices Inc. component.
//    
// THIS SOFTWARE IS PROVIDED BY ANALOG DEVICES "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
// INCLUDING, BUT NOT LIMITED TO, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A
// PARTICULAR PURPOSE ARE DISCLAIMED.
//
// IN NO EVENT SHALL ANALOG DEVICES BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, INTELLECTUAL PROPERTY
// RIGHTS, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR 
// BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF 
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// ***************************************************************************
// REGISTER MAP
// ***************************************************************************
// ***************************************************************************
// ---------------------------------------------------------------------------
// Address
// QW     Byte   Bits     Description
// ---------------------------------------------------------------------------
// 0x00   0x00   [31: 0]  version[31:0]         32'h00010061  (1.0a)
// ---------------------------------------------------------------------------
// 0x01   0x04   [31: 0]  config_data[31:0]     Xilinx FFT core specific config data
//
// This register data is passed as it is to Xilinx FFT core's 's_axis_config_tdata' port.
// The data is passed whenever this register is written regardless of whether the FFT core
// is running or not. Please refer to the Xilinx FFT core's documentation regarding
// details of the contents of this data.
// As of the day this core is being built, the following format apply:
//               [ 4: 0]  nfft                  FFT Size (max. 65536, min. 64)
//               [ 8: 8]  fwd_inv               FFT (0x1) or IFFT (0x0)
//               [24: 9]  scale                 FFT Scale factor
//
// The FFT is a Radix-4 Burst I/O the scaling so there are two bits of scaling at
// each stage- [10:9] is the first stage and there are log4(N) stages.
// As an example, [18:17] is the last stage of a 1k (1024) FFT.
// ---------------------------------------------------------------------------
// 0x02   0x08   [ 3: 3]  overflow              Xilinx core's overflow event (W1C)
//               [ 2: 2]  last_missing          Xilinx core's last missing event (W1C)
//               [ 1: 1]  last_unexpected       Xilinx core's last unexpected event (W1C)
//               [ 0: 0]  frame_start           Xilinx core's frame started event (W1C)
//
// This register indicates the status of an ADC data capture. Software must clear all the
// bits before starting a data capture.
// ---------------------------------------------------------------------------
// 0x03   0x0c   [ 0: 0]  menable               Enable (0x1) or disable (0x0) post processing.
//
// If post processing is enabled, the pcore translates the complex fft data into a magnitude
// phase format. This is an approximation function.
//    mag = sqrt((real*real)+(imaginary*imaginary));
// ---------------------------------------------------------------------------
// 0x04   0x10   [ 3: 2]  imaginary_sel[1:0]    Selects the imaginary component of fft input.
//                                                2'b11: sets to 0x0.
//                                                2'b10: sets to upper word of input data [31:16].
//                                                2'b01: sets to lower word of input data [15:0].
//                                                2'b00: sets to 0x0.
//               [ 1: 0]  real_sel[1:0]         Selects the real component of fft input.
//                                                2'b11: sets to 0x0.
//                                                2'b10: sets to upper word of input data [31:16].
//                                                2'b01: sets to lower word of input data [15:0].
//                                                2'b00: sets to 0x0.
// ---------------------------------------------------------------------------
// 0x05   0x14   [16:16]  window_enable         Enable (0x1) or disable (0x0) window function.
//               [15: 0]  window_incr[15:0]     Window phase increment (2pi = 0xffff)
// ---------------------------------------------------------------------------
// 0x06   0x18   [ 3: 3]  scope_initi           Initialize internal scope data (display use only).
//               [ 2: 0]  debug_select[2:0]     Debug select (internal use only)
// ---------------------------------------------------------------------------
// ***************************************************************************
// ***************************************************************************
